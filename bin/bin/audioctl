#!/usr/bin/env python3
import click
from pulsectl import Pulse, PulseStateEnum


pass_pulse = click.make_pass_decorator(Pulse)


@click.group()
@click.pass_context
def cli(ctx):
    ctx.obj = Pulse("audioctl")


def _get_source_by_name(pulse, name, device_class="sound"):
    for source in pulse.source_list():
        if (
            name in source.description.lower()
            and source.proplist.get("device.class") == device_class
        ):
            return source
    raise IOError("Unknown source")


def _get_sink_by_name(pulse, target_name):
    for sink in pulse.sink_list():
        if target_name in sink.description.lower():
            return sink
    raise IOError("Unknown sink")


@cli.command()
@click.argument("name", default="handy recorder")
@click.option("--toggle", is_flag=True)
@pass_pulse
def mute(pulse, name, toggle):
    """Mute or toggle the given source."""
    try:
        source = _get_source_by_name(pulse, name.lower())
        pulse.mute(source, not source.mute if toggle else True)
    except IOError:
        print(f"There is no source containing '{name}' in the description.")
        exit(1)


@cli.command()
@click.argument("name")
@pass_pulse
def move_all(pulse, name):
    """Set default sink and move all inputs to specified sink."""
    target_sink = _get_sink_by_name(pulse, name.lower())
    pulse.sink_default_set(target_sink)
    for sink_input in pulse.sink_input_list():
        pulse.sink_input_move(sink_input.index, target_sink.index)


@cli.command()
@click.option("-s", "--source", is_flag=True)
@pass_pulse
def ls(pulse, source):
    pulse_list = pulse.sink_list() if not source else pulse.source_list()
    for info in pulse_list:
        print(f"{info.name} ({info.description})")


@cli.command()
@pass_pulse
def active_sink(pulse):
    try:
        sink = [s for s in pulse.sink_list() if s.state == PulseStateEnum.running][0]
        print(f"{sink.name} ({sink.description})")
    except IndexError:
        print("No active sink")


if __name__ == "__main__":
    cli()

#!/usr/bin/env python3
import click
from pulsectl import Pulse, PulseIndexError, PulseSinkInfo


DEVICES = {
    "Starship": "alsa_output.pci-0000_2d_00.4.analog-stereo",
    "Headphone": "alsa_output.usb-FIIO_FiiO_USB_DAC-E10-01.analog-stereo",
    "MID": "bluez_sink.2C_4D_79_47_37_CA.a2dp_sink",
    "Aeropex": "bluez_sink.20_74_CF_D3_E9_A5.a2dp_sink",
    "ZOOM": "alsa_input.usb-ZOOM_Corporation_H4-00.iec958-stereo",
    "Micro": "alsa_input.pci-0000_2d_00.4.analog-stereo",
}
DEVICES_REV = {device_name: name for name, device_name in DEVICES.items()}
DEVICES_LC = {name.lower(): device_name for name, device_name in DEVICES.items()}


pass_pulse = click.make_pass_decorator(Pulse)


@click.group()
@click.pass_context
def cli(ctx):
    ctx.obj = Pulse("audioctl")


def _get_source_by_name(pulse, name, device_class="sound"):
    for source in pulse.source_list():
        if (
            name in source.description.lower()
            and source.proplist.get("device.class") == device_class
        ):
            return source
    raise IOError("Unknown source")


def _get_sink_by_name(pulse, target_name):
    try:
        return pulse.get_sink_by_name(DEVICES_LC.get(target_name.lower(), None))
    except (TypeError, PulseIndexError):
        for sink in pulse.sink_list():
            if target_name in sink.description.lower():
                return sink
    raise IOError("Unknown sink")


@cli.command()
@click.argument("name", default="handy recorder")
@click.option("--toggle", is_flag=True)
@pass_pulse
def mute(pulse, name, toggle):
    """Mute or toggle the given source."""
    try:
        source = _get_source_by_name(pulse, name.lower())
        pulse.mute(source, not source.mute if toggle else True)
    except IOError:
        print(f"There is no source containing '{name}' in the description.")
        exit(1)


@cli.command()
@click.argument("name")
@pass_pulse
def move_all(pulse, name):
    """Set default sink and move all inputs to specified sink."""
    if type(name) is not PulseSinkInfo:
        target_sink = _get_sink_by_name(pulse, name.lower())
    else:
        target_sink = name

    pulse.sink_default_set(target_sink)
    for sink_input in pulse.sink_input_list():
        pulse.sink_input_move(sink_input.index, target_sink.index)


@cli.command()
@pass_pulse
def move_next(pulse):
    """Move to the next sink"""
    pulse_list = [s for s in pulse.sink_list() if s.name in DEVICES_REV]
    current_sink = pulse.server_info().default_sink_name
    for active_index, sink in enumerate(pulse_list):
        if sink.name == current_sink:
            break
    next_sink = pulse_list[(active_index + 1) % len(pulse_list)]
    print(type(next_sink))
    move_all.callback(next_sink)


@cli.command()
@click.option("-s", "--source", is_flag=True)
@pass_pulse
def ls(pulse, source):
    pulse_list = pulse.sink_list() if not source else pulse.source_list()
    for info in pulse_list:
        print(f"{info.name} ({info.description})")


@cli.command()
@pass_pulse
def active_source(pulse):
    name = pulse.server_info().default_source_name
    print(DEVICES_REV.get(name, name))


@cli.command()
@pass_pulse
def active_sink(pulse):
    name = pulse.server_info().default_sink_name
    print(DEVICES_REV.get(name, name))


if __name__ == "__main__":
    cli()
